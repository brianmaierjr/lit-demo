{"version":3,"file":"my-button.js","sourceRoot":"","sources":["src/my-button.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAE1D;;;;;;GAMG;AAEI,IAAM,QAAQ,GAAd,MAAM,QAAS,SAAQ,UAAU;IAAjC;;QA6BL,WAAM,GAAW,SAAS,CAAC;IAS7B,CAAC;IAPU,MAAM;QACb,OAAO,IAAI,CAAA;sBACO,IAAI,CAAC,MAAM;;;KAG5B,CAAC;IACJ,CAAC;;AApCe,eAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;GAyB3B,AAzBqB,CAyBpB;AAGF;IADC,QAAQ,EAAE;wCACgB;AA7BhB,QAAQ;IADpB,aAAa,CAAC,WAAW,CAAC;GACd,QAAQ,CAsCpB","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n/**\n * An example element.\n *\n * @fires count-changed - Indicates when the count changes\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement('my-button')\nexport class MyButton extends LitElement {\n  static override styles = css`\n    button {\n      padding: 8px 16px;\n      border: none;\n      border-radius: 4px;\n      font-size: 16px;\n      cursor: pointer;\n      transition: background-color 0.3s, color 0.3s;\n    }\n    button.primary {\n      background-color: blue;\n      color: white;\n    }\n    button.secondary {\n      background-color: gray;\n      color: white;\n    }\n    button.success {\n      background-color: green;\n      color: white;\n    }\n    button.danger {\n      background-color: red;\n      color: white;\n    }\n  `;\n\n  @property()\n  intent: string = 'primary';\n\n  override render() {\n    return html`\n      <button class=${this.intent}>\n        <slot>Default Slot Content</slot>\n      </button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'my-button': MyButton;\n  }\n}\n"]}